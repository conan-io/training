package conan.ci.arg

class ConanArgs {

    static List<Argument> get() {
        return [
                new Argument<String>(
                        name: "conanfileDir",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_CONANFILE_DIR",
                        description: "Path to conanfile relative to container working directory.",
                ),
                new Argument<String>(
                        name: "conanRemoteUploadName",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_REMOTE_UPLOAD_NAME",
                        description: "The name from the list of remotes which will be used in conan upload command.",
                ),
                new Argument<String>(
                        name: "conanUploadPattern",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_UPLOAD_PATTERN",
                        description: "The default channel that will be used for calculating Conan references.",
                ),
                new Argument<String>(
                        name: "conanLocksUrl",
                        group: "conan",
                        envVarName: "TRAINING_LOCKS_URL",
                        description: "URL of GIT repo which will hold lockfiles.",
                ),
                new Argument<String>(
                        name: "conanChannel",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_CHANNEL",
                        description: "The default channel that will be used for calculating Conan references.",
                ),
                new Argument<String>(
                        name: "conanUser",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_USER",
                        description: "The default user that will be used for calculating Conan references.",
                ),
                new Argument<String>(
                        name: "conanConfigUrl",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_CONFIG_URL",
                        description: "URL of GIT repo which jobs will install Conan configurations from.",
                ),
                new Argument<String>(
                        name: "conanRemoteDevelop",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_REMOTE_DEVELOP",
                        description: "The primary repository for Conan artifacts.",
                ),
                new Argument<String>(
                        name: "conanRemoteTemp",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_REMOTE_TEMP",
                        description: "The temporary repository for Conan artifacts being actively built and tested.",
                ),
                new Argument<List<String>>(
                        name: "conanSettings",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_SETTINGS",
                        deserializer: { String s -> s.split(",") },
                        serializer: { List<String> l -> l.collect { String s -> "--settings ${s}" }.join(" ") },
                        description: "Settings to be passed to conan create and install commands.",
                ),
                new Argument<List<String>>(
                        name: "conanSettingsHost",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_SETTINGS_HOST",
                        deserializer: { String s -> s.split(",") },
                        serializer: { List<String> l -> l.collect { String s -> "--settings:host ${s}" }.join(" ") },
                        description: "Settings to be passed to conan create and install commands.",
                ),
                new Argument<List<String>>(
                        name: "conanSettingsBuild",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_SETTINGS_BUILD",
                        deserializer: { String s -> s.split(",") },
                        serializer: { List<String> l -> l.collect { String s -> "--settings:build ${s}" }.join(" ") },
                        description: "Settings to be passed to conan create and install commands.",
                ),
                new Argument<List<String>>(
                        name: "conanOptions",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_OPTIONS",
                        deserializer: { String s -> s.split(",") },
                        serializer: { List<String> l -> l.collect { String s -> "--options ${s}" }.join(" ") },
                        description: "Options to be passed to conan create and install commands.",
                ),
                new Argument<List<String>>(
                        name: "conanOptionsHost",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_OPTIONS_HOST",
                        deserializer: { String s -> s.split(",") },
                        serializer: { List<String> l -> l.collect { String s -> "--options:host ${s}" }.join(" ") },
                        description: "Options to be passed to conan create and install commands.",
                ),
                new Argument<List<String>>(
                        name: "conanOptionsBuild",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_OPTIONS_BUILD",
                        deserializer: { String s -> s.split(",") },
                        serializer: { List<String> l -> l.collect { String s -> "--options:build ${s}" }.join(" ") },
                        description: "Options to be passed to conan create and install commands.",
                ),
                new Argument<List<String>>(
                        name: "conanEnvVars",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_ENV_VARS",
                        deserializer: { String s -> s.split(",") },
                        serializer: { List<String> l -> l.collect { String s -> "--env ${s}" }.join(" ") },
                        description: "Env Vars to be passed to conan create and install commands.",
                ),
                new Argument<List<String>>(
                        name: "conanEnvVarsHost",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_ENV_VARS_HOST",
                        deserializer: { String s -> s.split(",") },
                        serializer: { List<String> l -> l.collect { String s -> "--env:host ${s}" }.join(" ") },
                        description: "Env Vars to be passed to conan create and install commands.",
                ),
                new Argument<List<String>>(
                        name: "conanEnvVarsBuild",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_ENV_VARS_BUILD",
                        deserializer: { String s -> s.split(",") },
                        serializer: { List<String> l -> l.collect { String s -> "--env:build ${s}" }.join(" ") },
                        description: "Env Vars to be passed to conan create and install commands.",
                ),
                new Argument<List<String>>(
                        name: "conanProfiles",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_PROFILES",
                        deserializer: { String s -> s.split(",") },
                        serializer: { List<String> l -> l.collect { String s -> "--profile ${s}" }.join(" ") },
                        description: "Profiles to be passed to conan create and install commands.",
                ),
                new Argument<List<String>>(
                        name: "conanProfilesHost",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_PROFILES_HOST",
                        deserializer: { String s -> s.split(",") },
                        serializer: { List<String> l -> l.collect { String s -> "--profile:host ${s}" }.join(" ") },
                        description: "Profiles to be passed to conan create and install commands.",
                ),
                new Argument<List<String>>(
                        name: "conanProfilesBuild",
                        group: "conan",
                        envVarName: "TRAINING_CONAN_PROFILES_BUILD",
                        deserializer: { String s -> s.split(",") },
                        serializer: { List<String> l -> l.collect { String s -> "--profile:build ${s}" }.join(" ") },
                        description: "Profiles to be passed to conan create and install commands.",
                ),
        ]
    }
}
